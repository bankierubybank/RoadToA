package com.mygdx.game;


import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Screen;
import com.badlogic.gdx.Input.Keys;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer.ShapeType;
import com.badlogic.gdx.maps.MapObject;
import com.badlogic.gdx.maps.MapObjects;
import com.badlogic.gdx.maps.tiled.TiledMap;
import com.badlogic.gdx.maps.tiled.TiledMapTileLayer;
import com.badlogic.gdx.maps.tiled.TmxMapLoader;
import com.badlogic.gdx.maps.tiled.renderers.OrthogonalTiledMapRenderer;


public class GameScreen implements Screen{
	
	final MyGame game;
	
	TiledMap map;
	
	OrthogonalTiledMapRenderer renderer;
	
	
	private int mapWidth = 20;
	private int mapHeight = 20;
	
	int x, y;
	boolean blocked = false;
	
	TiledMapTileLayer collisionLayer;
	
	
	Character p1;
	
	//Constructor
	public GameScreen(final MyGame game){
		this.game = game;
		
		
		
		map = new TmxMapLoader().load("map.tmx");
		renderer = new OrthogonalTiledMapRenderer(map);
		
		collisionLayer = (TiledMapTileLayer) map.getLayers().get(0);
		for (int x = 0; x < collisionLayer.getWidth(); x++) {
	         for (int y = 0; y < collisionLayer.getHeight(); y++) {
	            TiledMapTileLayer.Cell cell = collisionLayer.getCell(x, y);
	            if (cell == null) {
	               continue; // There is no cell
	            }
	            if (cell.getTile() == null) {
	               continue; // No tile inside cell
	            }
	            System.out.println(cell.getTile().getId() + " x:" + x + " y:" + y);
	         }
	      }
		
		
		p1 = new Character();
		
		
	}




	@Override
	public void render (float delta) {
		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);

		renderer.setView(p1.getCamera());
		renderer.render();
		p1.render();
		
		
		
		/*
		try {
		    cell = collisionLayer.getCell((int) (x / collisionLayer.getTileWidth()), (int) (y / collisionLayer.getTileHeight()));
		} catch (Exception e) {
		    e.printStackTrace();
		}

		if (cell.getTile().getProperties().containsKey("blocked")) {
		    blocked = true;
		}
		*/
		
		 for (y = 0; y < collisionLayer.getHeight(); y++) {
	           for (x = 0; x < collisionLayer.getWidth(); x++) {
	               if (collisionLayer.getCell(x, y) != null && collisionLayer.getCell(x, y).getTile().getProperties().containsKey("Blocked")) {
	                   System.out.println("Test");
	                  }
	           }
	     }


		if(Gdx.input.isKeyPressed(Keys.LEFT)) {
			p1.move(-1, 0);
		}
		if(Gdx.input.isKeyPressed(Keys.RIGHT)) {
			p1.move(1, 0);
		}
		if(Gdx.input.isKeyPressed(Keys.UP)) {
			p1.move(0, 1);
		}
		if(Gdx.input.isKeyPressed(Keys.DOWN)){
			p1.move(0, -1);
		}
		
		
		

	}
	

	
	@Override
	public void dispose () {
		map.dispose();
		renderer.dispose();
		
		p1.dispose();

	}



	
	
	
	
	

	@Override
	public void show() {
		// TODO Auto-generated method stub
		
	}




	@Override
	public void resize(int width, int height) {
		// TODO Auto-generated method stub
		
	}




	@Override
	public void pause() {
		// TODO Auto-generated method stub
		
	}




	@Override
	public void resume() {
		// TODO Auto-generated method stub
		
	}




	@Override
	public void hide() {
		// TODO Auto-generated method stub
		
	}




}
